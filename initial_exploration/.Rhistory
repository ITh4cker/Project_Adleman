16*5*50
16*7*50
16*7*50/(16*7*50+16*5*50)
0.6*12
12-7.2
View(infert)
str(inferet)
str(inferet)
inferet
str(infert)
data(infert, package="datasets")
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
gwplot(net.infert, selected.covariate="parity")
View(infert)
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
?print
summary(net.inferet)
summary(net.infert)
install.packages('neuralnet')
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
#install.packages('neuralnet')
library("neuralnet")
# Regular implimentation of a Neral Network
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
rep=10, err.fct="ce", linear.output=FALSE))
XOR <- c(0,1,1,0)
xor.data <- data.frame(expand.grid(c(0,1), c(0,1)), XOR)
print(net.xor <- neuralnet(XOR~Var1+Var2, xor.data, hidden=2, rep=5))
plot(net.xor, rep="best")
# This is a
data(infert, package="datasets")
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
gwplot(net.infert, selected.covariate="parity")
gwplot(net.infert, selected.covariate="induced")
gwplot(net.infert, selected.covariate="spontaneous")
confidence.interval(net.infert)
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,
threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
Var1 <- rpois(100,0.5)
Var2 <- rbinom(100,2,0.6)
Var3 <- rbinom(100,1,0.5)
SUM <- as.integer(abs(Var1+Var2+Var3+(rnorm(100))))
sum.data <- data.frame(Var1+Var2+Var3, SUM)
print(net.sum <- neuralnet(SUM~Var1+Var2+Var3, sum.data, hidden=1,
act.fct="tanh"))
prediction(net.sum)
data(infert, package="datasets")
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
exp(2)
exp((100-102/2))
exp((100 − 102)/2)
exp((100−102)/2)
exp((100−100)/2)
print(net.xor <- neuralnet(XOR~Var1+Var2, xor.data, hidden=2, rep=5))
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
print(net.xor <- neuralnet(XOR~Var1+Var2, xor.data, hidden=2, rep=5))
print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
rep=10, err.fct="ce", linear.output=FALSE)
)
summary(net)
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
?AIC
AIC(net)
AIC(net.infert)
AIC(net.sqrt)
# Working directory initialization
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
library(rattle)
library(tm)
library(SnowballC)
library(caret)
library(plyr)
library(tau)
library(ngram)
library(knitr)
library(Matrix)
library(RWeka)
library(ggplot2)
library(reshape)
library(wordcloud)
# Cleaners
wd <- NULL
file1Binary <- read.table(file = "./data/0A32eTdBKayjCWhZqDOQ.bytes", header = F)
file1Meta <- read.table(file = "./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- read.table("./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- read.delim2("./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- read.csv("./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- fread("./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- readlines("./data/0A32eTdBKayjCWhZqDOQ.asm")
file1Meta <- readLines("./data/0A32eTdBKayjCWhZqDOQ.asm")
head(file1Meta)
file1Meta[1]
setwd("..")
getwd()
getwd()
setwd("C:\Users\jsardinha\Documents\GitHub\Project_Adleman\initial_exploration")
setwd("C:/Users/jsardinha/Documents/GitHub/Project_Adleman/initial_exploration")
file1Meta <- readLines("../data/0A32eTdBKayjCWhZqDOQ.asm")
# Working directory initialization
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
library(rattle)
library(tm)
library(SnowballC)
library(caret)
library(plyr)
library(tau)
library(ngram)
library(knitr)
library(Matrix)
library(RWeka)
library(ggplot2)
library(reshape)
library(wordcloud)
# Cleaners
wd <- NULL
getwd()
# Working directory initialization
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
library(rattle)
library(tm)
library(SnowballC)
library(caret)
library(plyr)
library(tau)
library(ngram)
library(knitr)
library(Matrix)
library(RWeka)
library(ggplot2)
library(reshape)
library(wordcloud)
# Cleaners
wd <- NULL
file1Meta <- readLines("./data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Meta <- readLines("./data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Meta <- readLines("../data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
?readLines
getwd()
# Working directory initialization
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
library(rattle)
library(tm)
library(SnowballC)
library(caret)
library(plyr)
library(tau)
library(ngram)
library(knitr)
library(Matrix)
library(RWeka)
library(ggplot2)
library(reshape)
library(wordcloud)
# Cleaners
wd <- NULL
file_1_Meta <- readLines("./data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Bina <- read.table(file = "./data/dataSample/0A32eTdBKayjCWhZqDOQ.bytes", header = F)
# File 2
file_2_Meta <- readLines("./data/dataSample/0ACDbR5M3ZhBJajygTuf.asm")
file_2_Bina <- read.table(file = "./data/dataSample/0ACDbR5M3ZhBJajygTuf.bytes", header = F)
file_1_Meta <- readLines("./data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
getwd)
getwd()
# Working directory initialization
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
library(rattle)
library(tm)
library(SnowballC)
library(caret)
library(plyr)
library(tau)
library(ngram)
library(knitr)
library(Matrix)
library(RWeka)
library(ggplot2)
library(reshape)
library(wordcloud)
# Cleaners
wd <- NULL
file_1_Meta <- readLines("./data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
wd <- "./Documents/GitHub/Project_Adleman"
setwd(wd)
file_1_Meta <- readLines("../data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Bina <- read.table(file = "../data/dataSample/0A32eTdBKayjCWhZqDOQ.bytes", header = F)
file_2_Meta <- readLines("../data/dataSample/0ACDbR5M3ZhBJajygTuf.asm")
file_2_Bina <- read.table(file = "../data/dataSample/0ACDbR5M3ZhBJajygTuf.bytes", header = F)
file_1_Meta <- readLines("../data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Bin <- read.table(file = "../data/dataSample/0A32eTdBKayjCWhZqDOQ.bytes", header = F)
# File 2
file_2_Meta <- readLines("../data/dataSample/0ACDbR5M3ZhBJajygTuf.asm")
file_2_Bin <- read.table(file = "../data/dataSample/0ACDbR5M3ZhBJajygTuf.bytes", header = F)
head(file_1_Meta)
tail(file_1_Meta)
?fft
?sprintf
file_1_Bin
View(file_2_Bin)
unlist(file_1_Bin)
unlist(file_1_Bin[1,])
View(file_1_Bin)
file_1_Meta <- readLines("../data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Bin <- read.table(file = "../data/dataSample/0A32eTdBKayjCWhZqDOQ.bytes", header = T)
# File 2
file_2_Meta <- readLines("../data/dataSample/0ACDbR5M3ZhBJajygTuf.asm")
file_2_Bin <- read.table(file = "../data/dataSample/0ACDbR5M3ZhBJajygTuf.bytes", header = T)
unlist(file_1_Bin[1,])
View(file_1_Bin)
file_1_Meta <- readLines("../data/dataSample/0A32eTdBKayjCWhZqDOQ.asm")
file_1_Bin <- read.table(file = "../data/dataSample/0A32eTdBKayjCWhZqDOQ.bytes", header = F)
# File 2
file_2_Meta <- readLines("../data/dataSample/0ACDbR5M3ZhBJajygTuf.asm")
file_2_Bin <- read.table(file = "../data/dataSample/0ACDbR5M3ZhBJajygTuf.bytes", header = F)
unlist(file_1_Bin[1,])
unlist(file_1_Bin[2,])
unlist(file_1_Bin[2,2:17])
thisFFT <- fft(as.numeric(sprintf("%d",unlist(file_1_Bin[2,2:17]))))
thisFFT
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
myFFT[1,1:FFTWidth]=Mod(thisFFT)
?matrix
trainLabels=read.table(file="../data/dataSample/trainLabels.csv", sep=",", header=T)
getwd()
trainLabels=read.table(file="../data/trainLabels.csv", sep=",", header=T)
train.filenames <- list.files("./data/dataSample/", pattern="*.bytes", full.names=TRUE)
train.filenames
train.filenames <- list.files("../data/dataSample/", pattern="*.bytes", full.names=TRUE)
train.filenames
?trim
trainLabels <- read.table(file="../data/trainLabels.csv", sep=",", header=T)
# read in training data
trainFilenames <- list.files("../data/dataSample/", pattern="*.bytes", full.names=TRUE)
trainFilenames
teainFilenameLength = 20+6
trainFilenames <- substrRight(trainFilenames, teainFilenameLength)
library(stringr)
teainFilenameLength = 20+6
trainFilenames <- substrRight(trainFilenames, teainFilenameLength)
noTrain <- length(train.filenames)
noTrain
progressBlock <- 1000
FFTWidth <-1000
myFFT <- matrix(,nrow=noTrain,ncol=2*FFTWidth)
View(myFFT)
row.names(myFFT)=substr(train.filenames,7,26)
View(myFFT)
View(trainLabels)
trainFilenames
row.names(myFFT)=substr(train.filenames,20,46)
View(myFFT)
row.names(myFFT)=substr(train.filenames,20,40)
for (i in 1:noTrain) {
print(train.filenames[i])
# take FFT of the decimal values of the hex values in the .bytes file with 1st column (labels) removed
thisFFT=fft(as.numeric(sprintf("%d",unlist(read.table(train.filenames[i])[,2:17], use.names=FALSE))))[1:FFTWidth]
# separate out the resulting complex numbers into amplitude and phase parts and store them separately
myFFT[i,1:FFTWidth]=Mod(thisFFT)
myFFT[i,(FFTWidth+1):(2*FFTWidth)]=Arg(thisFFT)
# check on progress and dump results so far if it's warranted
if ((i %% progressBlock) == 0) {
print(i)
# write out a copy of the results so we can restart if it crashes
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
}
}
getwd()
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
i = 1
thisFFT=fft(as.numeric(sprintf("%d",unlist(read.table(train.filenames[i])[,2:17], use.names=FALSE))))[1:FFTWidth]
thisFFT
mod(thisFFT)
Mod(thisFFT)
thisFFT[1]
Mod(thisFFT[1])
?Mod
Arg(thisFFT[1])
thisFFT[2]
Mod(thisFFT[2])
Arg(thisFFT[2])
myFFT[i,1:FFTWidth]=Mod(thisFFT)
myFFT[i,(FFTWidth+1):(2*FFTWidth)]=Arg(thisFFT)
myFFT
thisFFT[2]
Mod(thisFFT[2])
Arg(thisFFT[2])
thisFFT[3]
Arg(thisFFT[3])
# read in training labels
trainLabels <- read.table(file="../data/trainLabels.csv", sep=",", header=T)
# read in training data
trainFilenames <- list.files("../data/dataSample/", pattern="*.bytes", full.names=TRUE)
noTrain <- length(trainFilenames) # Maybe when n is large, might want to subStrRight
# variable to break the job into 1000 blocks
progressBlock <- 10
# variable to set the width of FFT analysis to keep
FFTWidth <-10
# create empty matrix to contain results
myFFT <- matrix(,nrow=noTrain,ncol=2*FFTWidth)
# label the matrix using the base part of the filenames
row.names(myFFT)=substr(trainFilenames,20,40)
for (i in 1:noTrain) {
print(trainFilenames[i])
# take FFT of the decimal values of the hex values in the .bytes file with 1st column (labels) removed
thisFFT=fft(as.numeric(sprintf("%d",unlist(read.table(trainFilenames[i])[,2:17], use.names=FALSE))))[1:FFTWidth]
# separate out the resulting complex numbers into amplitude and phase parts and store them separately
myFFT[i,1:FFTWidth]=Mod(thisFFT)
myFFT[i,(FFTWidth+1):(2*FFTWidth)]=Arg(thisFFT)
# check on progress and dump results so far if it's warranted
if ((i %% progressBlock) == 0) {
print(i)
# write out a copy of the results so we can restart if it crashes
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
}
}
# dump final results
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
View(myFFT)
FFTResults <- read.table("FFTResults.txt")
class(FFTResults)
View(FFTResults)
plot(FFTResults)
g <- ggplot(FFTResults) + geom_histogram()
print(g)
View(FFTResults)
View(FFTResults)
?melt
library(reshape)
meltFFTResults <- melt(FFTResults)
View(meltFFTResults)
View(meltFFTResults)
plot(meltFFTResults)
meltFFTResults <- melt(FFTResults, id =row.names)
meltFFTResults <- melt(FFTResults, id =row.names(myFFT))
FFTResults <- c(row.names(myFFT), FFTResults)
FFTResults <- read.table("FFTResults.txt")
FFTResults <- c(row.names(myFFT), FFTResults)
FFTResults <- read.table("FFTResults.txt")
View(FFTResults)
FFTResults <- c(row.names(myFFT), FFTResults)
FFTResults <- read.table("FFTResults.txt")
View(FFTResults)
FFTResults$name <- row.names(myFFT)
FFTResults <- read.table("FFTResults.txt")
FFTResults$name <- row.names(myFFT)
View(FFTResults)
FFTResults <- read.table("FFTResults.txt")
FFTResults$name <- row.names(myFFT)
meltFFTResults <- melt(FFTResults, id ="name")
View(meltFFTResults)
plot(meltFFTResults)
View(myFFT)
View(meltFFTResults)
g <- ggplot(FFTResults, aes(x=variable)) + geom_histogram()
#print(g)
print(g)
View(FFTResults)
g <- ggplot(meltFFTResults, aes(x=variable)) + geom_histogram()
print(g)
View(meltFFTResults)
g <- ggplot(meltFFTResults, aes(x=variable)) + geom_line(stat = "density")
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, fill = name)) + geom_line(stat = "density")
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, fill = name)) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, fill = name), y = value) + geom_histogram()
print(g)
trainFilenames <- list.files("../data/dataSample/", pattern="*.bytes", full.names=TRUE)
trainFilenames
row.names(myFFT)=substr(trainFilenames,20,39)
View(myFFT)
FFTResults <- read.table("FFTResults.txt")
FFTResults$name <- row.names(myFFT)
meltFFTResults <- melt(FFTResults, id ="name")
g <- ggplot(meltFFTResults, aes(x=variable, fill = name), y = value) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, ), y = value, fill = name) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, fill = name) + geom_histogram()
print(g)
<- ggplot(meltFFTResults, aes(x=variable, y = value)) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value)) + geom_histogram()
print(g)
View(FFTResults)
View(meltFFTResults)
g <- ggplot(meltFFTResults, aes(x=variable, y = value)) + geom_point()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, fill = name)) + geom_point()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_histogram()
print(g)
point
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_density()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + grom_histogram(y=value)
print(g)
```
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_histogram(y=value)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_histogram(y=value)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_density()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_line()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = ..value..)) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value)) + geom_histogram()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point() + geom_line()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y = value, color = name)) + geom_point()
```
g <- ggplot(meltFFTResults, aes(x=variable, y=value)) + geom_point(color = name)
g <- ggplot(meltFFTResults, aes(x=variable, y=value, color = name)) + geom_point()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y=value, color = name)) + geom_point() + geom_density()
print(g)
g <- ggplot(meltFFTResults, aes(x=variable, y=value)) + geom_point(color = name) + geom_density()
print(g)
library(ggplot)
library(ggplot2)
read in training labels
trainLabels <- read.table(file="../data/trainLabels.csv", sep=",", header=T)
# read in training data
trainFilenames <- list.files("../data/dataSample/", pattern="*.bytes", full.names=TRUE)
noTrain <- length(trainFilenames) # Maybe when n is large, might want to subStrRight
# variable to break the job into 1000 blocks
progressBlock <- 1000
# variable to set the width of FFT analysis to keep
FFTWidth <-1000
# create empty matrix to contain results
myFFT <- matrix(,nrow=noTrain,ncol=2*FFTWidth)
# label the matrix using the base part of the filenames
row.names(myFFT)=substr(trainFilenames,20,39)
for (i in 1:noTrain) {
print(trainFilenames[i])
# take FFT of the decimal values of the hex values in the .bytes file with 1st column (labels) removed
thisFFT=fft(as.numeric(sprintf("%d",unlist(read.table(trainFilenames[i])[,2:17], use.names=FALSE))))[1:FFTWidth]
# separate out the resulting complex numbers into amplitude and phase parts and store them separately
myFFT[i,1:FFTWidth]=Mod(thisFFT)
myFFT[i,(FFTWidth+1):(2*FFTWidth)]=Arg(thisFFT)
# check on progress and dump results so far if it's warranted
if ((i %% progressBlock) == 0) {
print(i)
# write out a copy of the results so we can restart if it crashes
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
}
}
# dump final results
write.table(myFFT,file="FFTResults.txt",sep='\t',row.names=TRUE)
FFTResults <- read.table("FFTResults.txt")
FFTResults$name <- row.names(myFFT)
meltFFTResults <- melt(FFTResults, id ="name")
g <- ggplot(meltFFTResults, aes(x=variable, y=value, color = name)) + geom_point() + geom_density()
print(g)
FFTResults <- read.table("FFTResults.txt")
FFTResults$name <- row.names(myFFT)
meltFFTResults <- melt(FFTResults, id ="name")
g <- ggplot(meltFFTResults, aes(x=variable, y=value, color = name)) + geom_point() + geom_density()
print(g)
